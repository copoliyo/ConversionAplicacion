/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package consultasMantenimientos;

import general.DatosComunes;
import general.MysqlConnect;
import indices.IndiceRutasCliente;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import tablas.RutaCliente;
import util.Apariencia;
import util.BaseDatos;

/**
 *
 * @author Txus
 */
public class ConManRutas extends util.EscapeDialog {
    // Con esta variable definimos si estamos en una consulta (TRUE) o en
    // un mantenimiento (FALSE). Nos servirá para tener un sólo programa
    // para algunas Consultas/Mantenimientos que pueden compartir las 
    // mismas pantallas.

    private static boolean consulta;
    private static boolean enCreacion = false;

    IndiceRutasCliente indiceRutasCliente = null;
    private static IndiceRutasCliente irc = null;

    public static ResultSet rs = null;
    public static MysqlConnect m = null;

    public RutaCliente ruta = new RutaCliente();

    // Definiciones de componentes de pantalla
    public JFrame frameMenu = null;
    
    /**
     * Creates new form ConManRutas
     */
    public ConManRutas(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public ConManRutas(boolean consultaOmantenimiento) {
        ConManRutas.consulta = consultaOmantenimiento;
        //this.consulta = false;
        m = MysqlConnect.getDbCon();
        initComponents();
        borrarPantalla();
        cargaInicial();
        this.setVisible(true);
    }

    public ConManRutas(JFrame parentFrame, boolean consultaOmantenimiento) {
        frameMenu = parentFrame;
        ConManRutas.consulta = consultaOmantenimiento;
        //this.consulta = false;
        m = MysqlConnect.getDbCon();
        initComponents();
        borrarPantalla();
        cargaInicial();
        this.setVisible(true);
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlRuta = new javax.swing.JLabel();
        jtfnfRuta = new util.JTextFieldNumeroFijo(2);
        jbBuscarRuta = new javax.swing.JButton();
        jlDescripcion = new javax.swing.JLabel();
        jtffDescripcion = new util.JTextFieldFijo(30);
        jbSalir = new javax.swing.JButton();
        jbBorrar = new javax.swing.JButton();
        jbGrabar = new javax.swing.JButton();
        jbAtras = new javax.swing.JButton();
        jbAdelate = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Rutas de Cliente");

        jlRuta.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 14)); // NOI18N
        jlRuta.setText("Ruta");

        jtfnfRuta.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 14)); // NOI18N
        jtfnfRuta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfnfRutaActionPerformed(evt);
            }
        });

        jbBuscarRuta.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 14)); // NOI18N
        jbBuscarRuta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/BUSCAR.gif"))); // NOI18N
        jbBuscarRuta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBuscarRutaActionPerformed(evt);
            }
        });

        jlDescripcion.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 14)); // NOI18N
        jlDescripcion.setText("Descripción");

        jtffDescripcion.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 14)); // NOI18N

        jbSalir.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 14)); // NOI18N
        jbSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/SALIR.gif"))); // NOI18N
        jbSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalirActionPerformed(evt);
            }
        });

        jbBorrar.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 14)); // NOI18N
        jbBorrar.setText("Borrar");
        jbBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBorrarActionPerformed(evt);
            }
        });

        jbGrabar.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 14)); // NOI18N
        jbGrabar.setText("Grabar");
        jbGrabar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGrabarActionPerformed(evt);
            }
        });

        jbAtras.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 14)); // NOI18N
        jbAtras.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Atras.gif"))); // NOI18N
        jbAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAtrasActionPerformed(evt);
            }
        });

        jbAdelate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Adelante.gif"))); // NOI18N
        jbAdelate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAdelateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlDescripcion)
                            .addComponent(jlRuta))
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jtfnfRuta, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(25, 25, 25)
                                .addComponent(jbBuscarRuta, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jtffDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(170, 170, 170)
                        .addComponent(jbBorrar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbGrabar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbAtras, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbAdelate, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlRuta)
                    .addComponent(jtfnfRuta, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbBuscarRuta, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlDescripcion)
                    .addComponent(jtffDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jbBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jbGrabar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jbSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbAtras, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbAdelate, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalirActionPerformed
        salir();
    }//GEN-LAST:event_jbSalirActionPerformed

    private void jbBuscarRutaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBuscarRutaActionPerformed
        if (indiceRutasCliente == null) {
            indiceRutasCliente = new IndiceRutasCliente();
        } else {
            indiceRutasCliente.muestra();
        }       
        jtfnfRuta.setText(String.valueOf(indiceRutasCliente.getRutaCliente()));
        cargaDatos();
    }//GEN-LAST:event_jbBuscarRutaActionPerformed

    private void jbAdelateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAdelateActionPerformed
        // Si hay un espacio, entendemos código 0
        if (jtfnfRuta.getText().length() == 0) {
            jtfnfRuta.setText("0");
        }

        String strSql = "SELECT * FROM RUTCLI WHERE EMPRESA = '"
                + DatosComunes.eEmpresa
                + "' AND RUTCLI_RUTA > " + jtfnfRuta.getText()
                + " LIMIT 1";
        
        cargaDatos(strSql);

    }//GEN-LAST:event_jbAdelateActionPerformed

    private void jbAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAtrasActionPerformed
        // Si hay un espacio, entendemos código 0
        if (jtfnfRuta.getText().length() == 0) {
            jtfnfRuta.setText("0");
        }

        String strSql = "SELECT * FROM RUTCLI WHERE EMPRESA = '"
                + DatosComunes.eEmpresa
                + "' AND RUTCLI_RUTA < " + jtfnfRuta.getText()                
                + " ORDER BY RUTCLI_RUTA DESC LIMIT 1";        

        cargaDatos(strSql);
    }//GEN-LAST:event_jbAtrasActionPerformed

    private void jbBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBorrarActionPerformed
        enCreacion = false;
        int registrosBorrados;
        boolean existeRuta = false;               

        String strSql = "SELECT * FROM RUTCLI WHERE EMPRESA = '"
                + DatosComunes.eEmpresa
                + "' AND RUTCLI_RUTA = " + Integer.valueOf(jtfnfRuta.getText().trim());

        // Comprobramos si existe la ruta
        if (BaseDatos.countRows(strSql) > 0) {
            String sqlDelete = "DELETE FROM RUTCLI WHERE "
                    + "EMPRESA = '" + DatosComunes.eEmpresa + "' AND "
                    + "RUTCLI_RUTA = " + Integer.valueOf(jtfnfRuta.getText().trim());
            try {
                Statement ps = MysqlConnect.db.conn.createStatement();
             
                registrosBorrados = ps.executeUpdate(sqlDelete);
                
                if (registrosBorrados > 0){
                    JOptionPane.showMessageDialog(null,
                            "Ruta Borrada!!!");
                    borrarPantalla();
                    cargaInicial();
                }
            } catch (SQLException e) {
                registrosBorrados = -1;
                if (DatosComunes.enDebug) {
                    JOptionPane.showMessageDialog(null,
                            "Error en borrado fichero de Rutas!!!");
                    e.printStackTrace();
                }
            }
        } else {
            Apariencia.mensajeInformativo(5, "No existe la Ruta.<BR>Revisarlo!!!");
        }
    }//GEN-LAST:event_jbBorrarActionPerformed

    private void jbGrabarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGrabarActionPerformed
        boolean rutaGrabada = true;
        
        ruta.setEmpresa(DatosComunes.eEmpresa);
        ruta.setNombre(jtffDescripcion.getText().trim());
        ruta.setRuta(Integer.valueOf(jtfnfRuta.getText().trim()));
        ruta.write();
    }//GEN-LAST:event_jbGrabarActionPerformed

    private void jtfnfRutaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfnfRutaActionPerformed
        String strSql = "SELECT * FROM RUTCLI WHERE EMPRESA = '"
                + DatosComunes.eEmpresa
                + "' AND RUTCLI_RUTA >= " + jtfnfRuta.getText()
                + " LIMIT 1";
        
        int numeroDeFilas = 0;

        numeroDeFilas = BaseDatos.countRows(strSql);
        if (numeroDeFilas > 0) {
            try {
                borrarPantalla();
                rs = m.query(strSql);

                // Recorremos el recodSet para ir rellenando la tabla de rutas
                if (rs.next() == true) {
                    ruta.read(rs);
                    
                    jtfnfRuta.setText(String.valueOf(ruta.getRuta()));                    
                    jtffDescripcion.setText(ruta.getNombre());
                }
            } catch (SQLException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
            }
        }else{
           Apariencia.mensajeInformativo(5, "No existe la Ruta.<BR>Revisarlo!!!");
           borrarPantalla();
           cargaInicial();
        }
    }//GEN-LAST:event_jtfnfRutaActionPerformed

    /**
     * @param args the command line arguments
     */
    
     private void borrarPantalla() {

        if (consulta) {
            jtffDescripcion.setEnabled(false);
            jbBorrar.setVisible(false);
            jbGrabar.setVisible(false);
        } else {
            jtffDescripcion.setEnabled(true);
            jbBorrar.setVisible(true);
            jbGrabar.setVisible(true);
        }
        jtfnfRuta.setText("0");
        jtffDescripcion.setText("");
    }

    private void cargaInicial() {
        // Carga inicial en el primer Proveedor
        if (jtfnfRuta.getText().length() == 0) {
            jtfnfRuta.setText("0");
        }

        String strSql = "SELECT * FROM RUTCLI WHERE EMPRESA = '"
                + DatosComunes.eEmpresa
                + "' AND RUTCLI_RUTA >= " + jtfnfRuta.getText()
                + " LIMIT 1";

        cargaDatos(strSql);
    }

    private void cargaDatos() {
        String strSql = "SELECT * FROM RUTCLI WHERE EMPRESA = '"
                + DatosComunes.eEmpresa
                + "' AND RUTCLI_RUTA >= " + jtfnfRuta.getText()
                + " LIMIT 1";

        cargaDatos(strSql);
    }

    private void cargaDatos(String strSql) {
        int numeroDeFilas = 0;

        numeroDeFilas = BaseDatos.countRows(strSql);
        if (numeroDeFilas > 0) {
            try {
                borrarPantalla();
                rs = m.query(strSql);

                // Recorremos el recodSet para ir rellenando la tabla de rutas
                if (rs.next() == true) {
                    ruta.read(rs);
                    
                    jtfnfRuta.setText(String.valueOf(ruta.getRuta()));                    
                    jtffDescripcion.setText(ruta.getNombre());
                }
            } catch (SQLException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
            }
        }
    }

    private void salir() {
        this.dispose();
        frameMenu.setEnabled(true);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbAdelate;
    private javax.swing.JButton jbAtras;
    private javax.swing.JButton jbBorrar;
    private javax.swing.JButton jbBuscarRuta;
    private javax.swing.JButton jbGrabar;
    private javax.swing.JButton jbSalir;
    private javax.swing.JLabel jlDescripcion;
    private javax.swing.JLabel jlRuta;
    private javax.swing.JTextField jtffDescripcion;
    private javax.swing.JTextField jtfnfRuta;
    // End of variables declaration//GEN-END:variables
}
